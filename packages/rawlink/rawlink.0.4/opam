opam-version: "2.0"
name: "rawlink"
version: "0.4"
synopsis: "A platform-independent library to read and write raw packets."
description: """
Rawlink is an ocaml library for sending and receiving raw packets at the link
layer level. Sometimes you need to have full control of the packet, including
building the full ethernet frame.

The API is platform independent, it uses BPF on real UNIXes and AF_SOCKET on
linux. Some functionality is sacrificed so that the API is portable enough. 

Currently BPF and AF_PACKET are implemented, including filtering capabilities.
Writing a BPF program is a pain in the ass, so no facilities are provided for
it. If you need a BPF filter, I suggest you write a small .c file with a
function that returns the BPF program as a string, check `rawlink_stubs.c` for
an example.

Both normal blocking functions as well as `Lwt` monadic variants are provided.

A typical code for receiving all packets and just sending them back on a
specified interface are detailed below:

```
let link = Rawlink.open_link "eth0" in
let buf = Rawlink.read_packet link in
Printf.printf "got a packet with %d bytes.\\n%!" (Cstruct.len buf);
Rawlink.send_packet link buf
```

Check the mli interface for more options."""
maintainer: "Christiano F. Haesbaert <haesbaert@haesbaert.org>"
authors: "Christiano F. Haesbaert <haesbaert@haesbaert.org>"
license: "ISC"
homepage: "https://github.com/haesbaert/rawlink"
bug-reports: "https://github.com/haesbaert/rawlink/issues"
depends: [
  "cstruct" {>= "1.9" & < "3.0.0"}
  "lwt" {>= "2.4.7" & < "4.0.0"}
  "ocaml" {>= "4.02.3" & < "4.06.0"}
  "ocamlbuild" {build}
  "ocamlfind" {build}
  "ppx_cstruct"
]
build: ["sh" "build.sh"]
depexts: ["linux-headers"] {os-distribution = "alpine"}
dev-repo: "git+https://github.com/haesbaert/rawlink.git"
url {
  src: "https://github.com/haesbaert/rawlink/archive/v0.4.tar.gz"
  checksum: "md5=d10b3beffe14e45c4b3b6eec0f925d22"
}
